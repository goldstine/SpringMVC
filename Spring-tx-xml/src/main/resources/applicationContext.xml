<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.0.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                        http://www.springframework.org/schema/util
                        http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <!--&lt;!&ndash;   通过配置使用aop将通知方法加到具体的方法上&ndash;&gt;-->
    <!--&lt;!&ndash;    配置ioc将目标类和切面类进行扫描&ndash;&gt;-->
        <context:component-scan base-package="org.goldstine"></context:component-scan>

    <!--&lt;!&ndash;    开启基于注解的AOP功能&ndash;&gt;-->
    <!--    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>-->

<!--    配置对应的c3p0数据源-->
    <!--    应用外部属性文件配置项，进行解耦，通过context名称空间-->
    <context:property-placeholder location="classpath:dbconfig.properties"/>

    <!--   引用外部属性文件-->
    <!--    数据库连接池作为单实例是最好的，一个项目就一个连接池，连接池里面管理很多连接-->
    <!--    可以让Spring帮我们创建连接池对象，管理连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
        <property name="driverClass" value="${jdbc.driverClass}"></property>
    </bean>

<!--通过配置的方式将jdbcTemplate对象加入ioc-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg name="dataSource" ref="dataSource"></constructor-arg>
    </bean>

<!--    配置一个具名jdbcTemplate   NamedParameterJdbcTemplate-->
    <bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
<!--        使用构造器方式注入一个数据源-->
        <constructor-arg name="dataSource" ref="dataSource"></constructor-arg>
    </bean>

<!--    配置事务管理器，让其进行事务管理-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
<!--事务管理器对数据源进行控制-->
        <property name="dataSource" ref="dataSource"></property>
    </bean>
<!--开启基于注解的事务控制模式，依赖于名称空间tx-->
<!--    注意一定要将对应的aop的依赖包导入-->
<!--    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>-->
<!--给事务方法加注解-->


<!--    基于xml配置事务-->
<!--    Spring中提供事务管理器（事务切面），配置这个事务管理器-->
<!--    开启基于注解的声明式事务，依赖tx名称空间-->
<!--    给事务方法加注解-->
<!--   配置BookService-->
    <bean id="bookService" class="org.goldstine.service.BookService"></bean>

    <aop:config>
        <aop:pointcut expression="execution(* org.goldstine.ser*.*.*(..))" id="txPoint"/>
<!--        事务建议，事务增强-->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="txPoint"/>
    </aop:config>

<!--配置事务管理器-->
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
<!--        事务属性-->
        <tx:attributes>
<!--            指明哪些方法是事务方法,切入点表达式只是说，事务管理器切入这些方法，哪些方法加上事务通过tx:method指定的-->
            <tx:method name="*"/>
            <tx:method name="checkout" propagation="REQUIRED" timeout="-1"></tx:method>
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
</beans>